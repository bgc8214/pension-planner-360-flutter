import 'package:flutter/material.dart';
import 'package:intl/intl.dart';
import '../../../data/models/calculation_results.dart';

/// 연금수령 시뮬레이션 결과 카드
class PensionReceiptCard extends StatelessWidget {
  final PensionReceiptSimulationResult result;

  const PensionReceiptCard({
    super.key,
    required this.result,
  });

  @override
  Widget build(BuildContext context) {
    final numberFormat = NumberFormat('#,###');

    return Card(
      child: Padding(
        padding: const EdgeInsets.all(20.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(10),
                  decoration: BoxDecoration(
                    color: const Color(0xFF10B981).withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Icon(
                    Icons.payments_rounded,
                    color: Color(0xFF10B981),
                    size: 28,
                  ),
                ),
                const SizedBox(width: 14),
                Text(
                  '연금 수령 시뮬레이션',
                  style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                        fontWeight: FontWeight.w700,
                        letterSpacing: -0.5,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 24),

            // 월 수령액 (메인 결과)
            Container(
              padding: const EdgeInsets.all(24),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [
                    Color(0xFF10B981), // Green 500
                    Color(0xFF059669), // Green 600
                  ],
                  begin: Alignment.topLeft,
                  end: Alignment.bottomRight,
                ),
                borderRadius: BorderRadius.circular(16),
                boxShadow: [
                  BoxShadow(
                    color: const Color(0xFF10B981).withOpacity(0.3),
                    blurRadius: 12,
                    offset: const Offset(0, 4),
                  ),
                ],
              ),
              child: Column(
                children: [
                  Text(
                    '월 예상 수령액',
                    style: Theme.of(context).textTheme.titleMedium?.copyWith(
                          color: Colors.white.withOpacity(0.9),
                          fontWeight: FontWeight.w600,
                        ),
                  ),
                  const SizedBox(height: 12),
                  Text(
                    '${numberFormat.format(result.monthlyAmount)}원',
                    style: Theme.of(context).textTheme.displayMedium?.copyWith(
                          fontWeight: FontWeight.w800,
                          color: Colors.white,
                          fontSize: 36,
                          letterSpacing: -1,
                        ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),

            // 과세 방식별 비교
            Text(
              '과세 방식별 실수령액',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 12),

            // 종합과세 카드 (확장 가능)
            _buildExpandableTaxCard(
              context,
              title: '종합과세',
              monthlyAmount: result.comprehensiveTaxMonthlyAmount,
              tax: result.comprehensiveTaxAmount,
              isRecommended: result.recommendedTaxType == '종합과세',
              taxType: 'comprehensive',
            ),
            const SizedBox(height: 8),

            // 분리과세 카드 (확장 가능)
            _buildExpandableTaxCard(
              context,
              title: '분리과세',
              monthlyAmount: result.separateTaxMonthlyAmount,
              tax: result.separateTaxAmount,
              isRecommended: result.recommendedTaxType == '분리과세',
              taxType: 'separate',
            ),
            const SizedBox(height: 8),

            // 저율과세 카드 (확장 가능)
            _buildExpandableTaxCard(
              context,
              title: '저율과세 (3~5%)',
              monthlyAmount: result.lowRateTaxMonthlyAmount,
              tax: result.lowRateTaxAmount,
              isRecommended: result.recommendedTaxType == '저율과세',
              taxType: 'low',
            ),
            const SizedBox(height: 16),

            // 추천 정보
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Theme.of(context).colorScheme.surfaceVariant,
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Icon(Icons.check_circle_outline, size: 20),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      '추천: ${result.recommendedTaxType}\n'
                      '${_getRecommendationReason(result)}',
                      style: Theme.of(context).textTheme.bodySmall,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// 확장 가능한 과세 카드
  Widget _buildExpandableTaxCard(
    BuildContext context, {
    required String title,
    required int monthlyAmount,
    required int tax,
    required bool isRecommended,
    required String taxType,
  }) {
    final numberFormat = NumberFormat('#,###');
    final percentFormat = NumberFormat('#0.00');

    return Theme(
      data: Theme.of(context).copyWith(dividerColor: Colors.transparent),
      child: Container(
        decoration: BoxDecoration(
          border: Border.all(
            color: isRecommended
                ? Theme.of(context).colorScheme.primary
                : Theme.of(context).dividerColor,
            width: isRecommended ? 2 : 1,
          ),
          borderRadius: BorderRadius.circular(12),
          color: isRecommended
              ? Theme.of(context).colorScheme.primaryContainer.withOpacity(0.1)
              : null,
        ),
        child: ExpansionTile(
          tilePadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
          childrenPadding: const EdgeInsets.all(16),
          title: Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Row(
                children: [
                  Text(
                    title,
                    style: Theme.of(context).textTheme.titleSmall?.copyWith(
                          fontWeight: FontWeight.bold,
                        ),
                  ),
                  if (isRecommended) ...[
                    const SizedBox(width: 8),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 2,
                      ),
                      decoration: BoxDecoration(
                        color: Theme.of(context).colorScheme.primary,
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        '추천',
                        style: Theme.of(context).textTheme.labelSmall?.copyWith(
                              color: Theme.of(context).colorScheme.onPrimary,
                            ),
                      ),
                    ),
                  ],
                ],
              ),
              Text(
                '${numberFormat.format(monthlyAmount)}원',
                style: Theme.of(context).textTheme.titleSmall?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: isRecommended
                          ? Theme.of(context).colorScheme.primary
                          : null,
                    ),
              ),
            ],
          ),
          subtitle: Padding(
            padding: const EdgeInsets.only(top: 4),
            child: Text(
              '세금: ${numberFormat.format(tax)}원',
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.onSurfaceVariant,
                  ),
            ),
          ),
          children: [
            _buildCalculationDetails(context, taxType, numberFormat, percentFormat),
          ],
        ),
      ),
    );
  }

  /// 계산 상세 내용 (세로 레이아웃)
  Widget _buildCalculationDetails(
    BuildContext context,
    String taxType,
    NumberFormat numberFormat,
    NumberFormat percentFormat,
  ) {
    // result의 netReceivableAmount는 이미 연간 금액
    int annualPension;
    if (taxType == 'comprehensive') {
      annualPension = result.comprehensiveTaxAnnualAmount;
    } else if (taxType == 'separate') {
      annualPension = result.separateTaxAnnualAmount;
    } else {
      annualPension = result.lowRateTaxAnnualAmount;
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        if (taxType == 'comprehensive') ..._buildComprehensiveTaxCards(context, annualPension, numberFormat, percentFormat),
        if (taxType == 'separate') ..._buildSeparateTaxCards(context, annualPension, numberFormat, percentFormat),
        if (taxType == 'low') ..._buildLowRateTaxCards(context, annualPension, numberFormat, percentFormat),
      ],
    );
  }

  /// 종합과세 계산 카드들
  List<Widget> _buildComprehensiveTaxCards(
    BuildContext context,
    int annualPension,
    NumberFormat numberFormat,
    NumberFormat percentFormat,
  ) {
    final pensionDeduction = (annualPension * 0.9).round();
    final personalDeduction = 1500000;
    final taxBase = (annualPension - pensionDeduction - personalDeduction).clamp(0, double.infinity).toInt();
    final taxAmount = result.comprehensiveTaxAmount;
    final localTax = (taxAmount * 0.1).round();
    final totalTax = taxAmount + localTax;
    final netIncome = annualPension - totalTax;
    final effectiveRate = annualPension > 0 ? (totalTax / annualPension * 100) : 0.0;

    return [
      _buildCalculationCard(context, '연간 수령액', null, annualPension, numberFormat),
      _buildCalculationCard(context, '(-) 연금소득공제', '(최대 한도 적용)', pensionDeduction, numberFormat),
      _buildCalculationCard(context, '(-) 연금소득금액', null, annualPension - pensionDeduction, numberFormat),
      _buildCalculationCard(context, '(-) 인적공제 (기본)', null, personalDeduction, numberFormat),
      _buildCalculationCard(context, '(=) 과세표준', null, taxBase, numberFormat),
      _buildCalculationCard(context, '(→) 산출세액', '누진세율표 적용', taxAmount - localTax, numberFormat),
      _buildCalculationCard(context, '(+) 지방소득세', '산출세액 × 10%', localTax, numberFormat),
      _buildCalculationCard(context, '(=) 총 납부세액', null, totalTax, numberFormat, isHighlight: true, highlightColor: Colors.red),
      _buildCalculationCard(context, '세후 실수령액', '연간수령액 - 총납부세액', netIncome, numberFormat, isHighlight: true, highlightColor: Colors.blue),
      _buildPercentageCard(context, '💡 실효세율', '총납부세액 ÷ 연간수령액 × 100', effectiveRate, percentFormat),
    ];
  }

  /// 분리과세 계산 카드들
  List<Widget> _buildSeparateTaxCards(
    BuildContext context,
    int annualPension,
    NumberFormat numberFormat,
    NumberFormat percentFormat,
  ) {
    final taxAmount = result.separateTaxAmount;
    final netIncome = annualPension - taxAmount;
    final effectiveRate = annualPension > 0 ? (taxAmount / annualPension * 100) : 0.0;

    return [
      _buildCalculationCard(context, '연간 수령액', null, annualPension, numberFormat),
      _buildCalculationCard(context, '(=) 총 납부세액', '연간수령액 × 15.4%', taxAmount, numberFormat, isHighlight: true, highlightColor: Colors.red),
      _buildCalculationCard(context, '세후 실수령액', '연간수령액 - 총납부세액', netIncome, numberFormat, isHighlight: true, highlightColor: Colors.blue),
      _buildPercentageCard(context, '💡 실효세율', '총납부세액 ÷ 연간수령액 × 100', effectiveRate, percentFormat),
      const SizedBox(height: 12),
      Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.amber.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.amber.withOpacity(0.3)),
        ),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Icon(Icons.info_outline, size: 18, color: Colors.amber),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                '분리과세는 다른 소득과 합산하지 않고 연금 소득에만 15.4%의 세율을 적용합니다.\n연금 외 소득이 많은 경우 유리합니다.',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(height: 1.4, fontSize: 11),
              ),
            ),
          ],
        ),
      ),
    ];
  }

  /// 저율과세 계산 카드들
  List<Widget> _buildLowRateTaxCards(
    BuildContext context,
    int annualPension,
    NumberFormat numberFormat,
    NumberFormat percentFormat,
  ) {
    final taxAmount = result.lowRateTaxAmount;
    final netIncome = annualPension - taxAmount;
    final effectiveRate = annualPension > 0 ? (taxAmount / annualPension * 100) : 0.0;
    final taxRate = annualPension <= 15000000 ? 3.3 : 5.5;

    return [
      _buildCalculationCard(context, '연간 수령액', null, annualPension, numberFormat),
      _buildCalculationCard(context, '(=) 총 납부세액', '연간수령액 × $taxRate%', taxAmount, numberFormat, isHighlight: true, highlightColor: Colors.red),
      _buildCalculationCard(context, '세후 실수령액', '연간수령액 - 총납부세액', netIncome, numberFormat, isHighlight: true, highlightColor: Colors.blue),
      _buildPercentageCard(context, '💡 실효세율', '총납부세액 ÷ 연간수령액 × 100', effectiveRate, percentFormat),
      const SizedBox(height: 12),
      Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.green.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
          border: Border.all(color: Colors.green.withOpacity(0.3)),
        ),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Icon(Icons.info_outline, size: 18, color: Colors.green),
            const SizedBox(width: 8),
            Expanded(
              child: Text(
                '저율과세는 10년 이상 가입 시 적용되며, 가장 낮은 세율입니다.\n• 연금수령 1,500만원 이하: 3.3%\n• 연금수령 1,500만원 초과: 5.5%',
                style: Theme.of(context).textTheme.bodySmall?.copyWith(height: 1.4, fontSize: 11),
              ),
            ),
          ],
        ),
      ),
    ];
  }

  /// 계산 항목 카드 (세로 레이아웃)
  Widget _buildCalculationCard(
    BuildContext context,
    String label,
    String? description,
    int amount,
    NumberFormat numberFormat, {
    bool isHighlight = false,
    Color? highlightColor,
  }) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: isHighlight
            ? (highlightColor ?? Colors.grey).withOpacity(0.1)
            : Theme.of(context).colorScheme.surfaceVariant.withOpacity(0.3),
        borderRadius: BorderRadius.circular(8),
        border: isHighlight
            ? Border.all(
                color: (highlightColor ?? Colors.grey).withOpacity(0.5),
                width: 1.5,
              )
            : null,
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  label,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        fontWeight: isHighlight ? FontWeight.bold : FontWeight.w600,
                        fontSize: 13,
                      ),
                ),
              ),
              Text(
                '${numberFormat.format(amount)}원',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      fontWeight: isHighlight ? FontWeight.bold : FontWeight.w600,
                      color: isHighlight ? highlightColor : Theme.of(context).colorScheme.primary,
                      fontSize: 14,
                    ),
              ),
            ],
          ),
          if (description != null) ...[
            const SizedBox(height: 4),
            Text(
              description,
              style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(context).colorScheme.onSurfaceVariant,
                    fontSize: 11,
                  ),
            ),
          ],
        ],
      ),
    );
  }

  /// 퍼센트 표시 카드
  Widget _buildPercentageCard(
    BuildContext context,
    String label,
    String description,
    double percentage,
    NumberFormat percentFormat,
  ) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer.withOpacity(0.3),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(
          color: Theme.of(context).colorScheme.primary.withOpacity(0.3),
        ),
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Expanded(
                child: Text(
                  label,
                  style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                        fontSize: 13,
                      ),
                ),
              ),
              Text(
                '${percentFormat.format(percentage)}%',
                style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                      color: Theme.of(context).colorScheme.primary,
                      fontSize: 14,
                    ),
              ),
            ],
          ),
          const SizedBox(height: 4),
          Text(
            description,
            style: Theme.of(context).textTheme.bodySmall?.copyWith(
                  color: Theme.of(context).colorScheme.onSurfaceVariant,
                  fontSize: 11,
                ),
          ),
        ],
      ),
    );
  }

  String _getRecommendationReason(PensionReceiptSimulationResult result) {
    switch (result.recommendedTaxType) {
      case '저율과세':
        return '10년 이상 유지 시 저율과세가 가장 유리합니다.';
      case '분리과세':
        return '연금 외 소득이 많은 경우 분리과세가 유리합니다.';
      case '종합과세':
        return '연금 외 소득이 적은 경우 종합과세가 유리합니다.';
      default:
        return '';
    }
  }
}
